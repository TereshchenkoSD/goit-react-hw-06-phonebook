{"version":3,"sources":["redux/actions/contacts.js","components/Form/Form.styles.jsx","components/Form/Form.jsx","components/ContactList/ContactList.styles.jsx","components/Contact/Contact.styles.jsx","components/Contact/Contact.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styles.jsx","components/Filter/Filter.jsx","components/Title/Title.styles.jsx","components/Title/Title.jsx","App.styles.jsx","App.js","redux/reducers/contacts.js","redux/reducers/index.js","redux/store/index.js","index.js"],"names":["addContact","createAction","name","number","payload","id","nanoid","deleteContact","changeFilter","Form","styled","form","Label","label","Input","input","Button","button","connect","dispatch","onSubmit","useState","setName","setNumber","handleInputChange","e","currentTarget","value","formReset","preventDefault","type","pattern","title","required","onChange","List","ul","ContactListItem","li","ContactButton","Contact","onDeleteContact","onClick","state","filter","contacts","normalizedFilter","toLowerCase","contact","includes","map","FilterLabel","FilterInput","target","Heading","h2","Title","text","FormContainer","div","App","contactsReducer","createReducer","filterReducer","_","rootReducer","combineReducers","persistConfig","key","storage","blacklist","persistedReducer","persistReducer","store","configureStore","reducer","devTools","process","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","logger","storeObject","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","querySelector"],"mappings":"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","file":"static/js/main.c42737da.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\r\n\r\nimport { nanoid } from 'nanoid';\r\n\r\nexport const addContact = createAction('contacts/Add', (name, number) => {\r\n  return {\r\n    payload: {\r\n      id: nanoid(),\r\n      name,\r\n      number,\r\n    },\r\n  };\r\n});\r\n\r\nexport const deleteContact = createAction('contacts/Delete');\r\n\r\nexport const changeFilter = createAction('filter/Change');\r\n","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  margin-bottom: 20px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  max-width: 400px;\n  margin-bottom: 15px;\n`;\n\nexport const Input = styled.input`\n  height: 30px;\n\n  border-radius: 4px;\n\n  border: 2px solid lightblue;\n\n  font-size: 16px;\n  font-weight: 500;\n  line-height: 1.875;\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  min-width: 200px;\n  padding-top: 5px;\n  padding-bottom: 5px;\n\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n\n  color: rgba(33, 33, 33, 1);\n  background-color: rgba(156, 156, 156, 1);\n\n  font-size: 16px;\n  font-weight: 700;\n  line-height: 1.875;\n  letter-spacing: 0.06em;\n\n  transition-property: color, background-color, box-shadow;\n  transition-duration: 250ms;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover,\n  &:focus {\n    color: rgba(245, 244, 250, 1);\n    background-color: rgba(33, 150, 243, 1);\n    box-shadow: 0px 3px 1px rgba(0, 0, 0, 0.1), 0px 1px 2px rgba(0, 0, 0, 0.08),\n      0px 2px 2px rgba(0, 0, 0, 0.12);\n  }\n\n  & svg {\n    height: 24px;\n    width: 24px;\n    margin-right: 5px;\n  }\n`;\n","import { useState } from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { CgUserAdd } from 'react-icons/cg';\r\n\r\nimport { addContact } from '../../redux/actions/contacts';\r\n\r\nimport { Form, Label, Input, Button } from './Form.styles';\r\n\r\nexport const ContactForm = ({ onSubmit }) => {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const handleInputChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    onSubmit(name, number);\r\n\r\n    formReset();\r\n  };\r\n\r\n  const formReset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <Form onSubmit={handleSubmit}>\r\n      <Label>\r\n        Name\r\n        <Input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          value={name}\r\n          onChange={handleInputChange}\r\n        />\r\n      </Label>\r\n      <Label>\r\n        Number\r\n        <Input\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          value={number}\r\n          onChange={handleInputChange}\r\n        />\r\n      </Label>\r\n      <Button type=\"submit\">\r\n        <CgUserAdd />\r\n        Add contact\r\n      </Button>\r\n    </Form>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: (name, number) => dispatch(addContact(name, number)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm);\r\n\r\n// export default class ContactForm extends Component {\r\n//   state = {\r\n//     name: '',\r\n//     number: '',\r\n//   };\r\n\r\n//   nameInputId = uuidv4();\r\n\r\n//   handleInputChange = e => {\r\n//     const { name, value } = e.currentTarget;\r\n//     this.setState({ [name]: value });\r\n//   };\r\n\r\n//   handleSubmit = e => {\r\n//     e.preventDefault();\r\n\r\n//     this.props.onSubmit(this.state);\r\n\r\n//     this.formReset();\r\n//   };\r\n\r\n//   formReset = () => {\r\n//     this.setState({ name: '', number: '' });\r\n//   };\r\n\r\n//   render() {\r\n//     const { name, number } = this.state;\r\n//     return (\r\n//       <Form onSubmit={this.handleSubmit}>\r\n//         <Label>\r\n//           Name\r\n//           <Input\r\n//             type=\"text\"\r\n//             name=\"name\"\r\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n//             title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n//             required\r\n//             value={name}\r\n//             onChange={this.handleInputChange}\r\n//           />\r\n//         </Label>\r\n//         <Label>\r\n//           Number\r\n//           <Input\r\n//             type=\"tel\"\r\n//             name=\"number\"\r\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n//             title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n//             value={number}\r\n//             onChange={this.handleInputChange}\r\n//           />\r\n//         </Label>\r\n//         <Button type=\"submit\">\r\n//           <CgUserAdd />\r\n//           Add contact\r\n//         </Button>\r\n//       </Form>\r\n//     );\r\n//   }\r\n// }\r\n\r\nContactForm.propTypes = {\r\n  onSubmit: PropTypes.func,\r\n};\r\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  width: 100%;\n  max-width: 400px;\n`;\n","import styled from '@emotion/styled';\n\nexport const ContactListItem = styled.li`\n  margin-bottom: 20px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nexport const ContactButton = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-width: 150px;\n  padding-top: 2px;\n  padding-bottom: 2px;\n\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n\n  color: rgba(33, 33, 33, 1);\n  background-color: rgba(156, 156, 156, 1);\n\n  font-size: 14px;\n  font-weight: 500;\n  line-height: 1.875;\n  letter-spacing: 0.06em;\n\n  transition-property: color, background-color, box-shadow;\n  transition-duration: 250ms;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover,\n  &:focus {\n    color: rgba(245, 244, 250, 1);\n    background-color: rgba(33, 150, 243, 1);\n    box-shadow: 0px 3px 1px rgba(0, 0, 0, 0.1), 0px 1px 2px rgba(0, 0, 0, 0.08),\n      0px 2px 2px rgba(0, 0, 0, 0.12);\n  }\n\n  & svg {\n    height: 18px;\n    width: 18px;\n    margin-right: 5px;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { BsTrash } from 'react-icons/bs';\n\nimport { ContactListItem, ContactButton } from './Contact.styles';\n\nconst Contact = ({ id, name, number, onDeleteContact }) => {\n  return (\n    <ContactListItem key={id}>\n      {name}: {number}\n      <ContactButton type=\"button\" onClick={() => onDeleteContact(id)}>\n        <BsTrash />\n        Delete\n      </ContactButton>\n    </ContactListItem>\n  );\n};\n\nContact.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  number: PropTypes.string,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default Contact;\n","import PropTypes from 'prop-types';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { List } from './ContactList.styles';\r\n\r\nimport Contact from '../Contact';\r\n\r\nimport { deleteContact } from '../../redux/actions/contacts';\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => {\r\n  return (\r\n    <List>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <Contact\r\n          key={id}\r\n          id={id}\r\n          name={name}\r\n          number={number}\r\n          onDeleteContact={onDeleteContact}\r\n        />\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  const { filter, contacts } = state;\r\n  const normalizedFilter = filter.toLowerCase();\r\n\r\n  const visibleContacts = contacts.filter(contact =>\r\n    contact.name.toLowerCase().includes(normalizedFilter),\r\n  );\r\n\r\n  return { contacts: visibleContacts };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onDeleteContact: id => dispatch(deleteContact(id)),\r\n});\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string,\r\n      name: PropTypes.string,\r\n      number: PropTypes.string,\r\n    }),\r\n  ),\r\n\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import styled from '@emotion/styled';\n\nexport const FilterLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  max-width: 400px;\n  margin-bottom: 15px;\n`;\n\nexport const FilterInput = styled.input`\n  height: 30px;\n\n  border-radius: 4px;\n\n  border: 2px solid lightblue;\n\n  font-size: 16px;\n  font-weight: 500;\n  line-height: 1.875;\n`;\n","import PropTypes from 'prop-types';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { changeFilter } from '../../redux/actions/contacts';\r\n\r\nimport { FilterLabel, FilterInput } from './Filter.styles';\r\n\r\nconst Filter = ({ value, onChange }) => {\r\n  return (\r\n    <FilterLabel>\r\n      Find contacts by name\r\n      <FilterInput type=\"text\" value={value} onChange={onChange}></FilterInput>\r\n    </FilterLabel>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  value: state.filter,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: e => dispatch(changeFilter(e.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import styled from '@emotion/styled';\n\nexport const Heading = styled.h2`\n  margin-bottom: 10px;\n`;\n","import PropTypes from 'prop-types';\nimport { Heading } from './Title.styles';\n\nconst Title = ({ text }) => {\n  return <Heading>{text}</Heading>;\n};\n\nTitle.propTypes = {\n  text: PropTypes.string.isRequired,\n};\n\nexport default Title;\n","import styled from '@emotion/styled';\n\nexport const FormContainer = styled.div`\n  width: 100%;\n  max-width: 500px;\n  height: auto;\n\n  padding: 10px 20px;\n  margin: 10px auto;\n\n  box-shadow: 0px 3px 1px rgba(0, 0, 0, 0.1), 0px 1px 2px rgba(0, 0, 0, 0.08),\n    0px 2px 2px rgba(0, 0, 0, 0.12);\n`;\n","// import { useState, useEffect } from 'react';\r\n// import { v4 as uuidv4 } from 'uuid';\r\n\r\nimport ContactForm from './components/Form';\r\n\r\nimport ContactList from './components/ContactList';\r\n\r\nimport Filter from './components/Filter';\r\n\r\nimport Title from './components/Title';\r\n\r\n// import initialContacts from './data/contacts.json';\r\n\r\nimport { FormContainer } from './App.styles';\r\n\r\nexport const App = () => {\r\n  // const [contacts, setContacts] = useState([]);\r\n  // const [filter, setFilter] = useState('');\r\n\r\n  // const addContact = (name, number) => {\r\n  //   if (\r\n  //     contacts.find(\r\n  //       contact => contact.name.toLowerCase() === name.toLowerCase(),\r\n  //     )\r\n  //   ) {\r\n  //     alert(`${name} is already in the contact list`);\r\n  //     return;\r\n  //   }\r\n  //   const contact = {\r\n  //     id: uuidv4(),\r\n  //     name,\r\n  //     number,\r\n  //   };\r\n\r\n  //   setContacts(contacts => [contact, ...contacts]);\r\n  // };\r\n\r\n  // useEffect(() => {\r\n  //   const savedContacts = localStorage.getItem('contacts');\r\n\r\n  //   const parsedContacts = JSON.parse(savedContacts);\r\n\r\n  //   if (parsedContacts) {\r\n  //     setContacts(parsedContacts);\r\n  //   }\r\n  // }, []);\r\n\r\n  // useEffect(() => {\r\n  //   localStorage.setItem('contacts', JSON.stringify(contacts));\r\n  // }, [contacts]);\r\n\r\n  // const deleteContact = contactId => {\r\n  //   setContacts(contacts.filter(contact => contact.id !== contactId));\r\n  // };\r\n\r\n  // const changeFilter = e => {\r\n  //   setFilter(e.currentTarget.value);\r\n  // };\r\n\r\n  // const getVisibleContacts = () => {\r\n  //   const normalizedFilter = filter.toLowerCase();\r\n\r\n  //   return contacts.filter(contact =>\r\n  //     contact.name.toLowerCase().includes(normalizedFilter),\r\n  //   );\r\n  // };\r\n\r\n  return (\r\n    <FormContainer>\r\n      <Title text={'Phonebook'} />\r\n      <ContactForm />\r\n      <Title text={'Contacts'} />\r\n      <Filter />\r\n      <ContactList />\r\n    </FormContainer>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { createReducer } from '@reduxjs/toolkit';\r\n\r\nimport { addContact, deleteContact, changeFilter } from '../actions/contacts';\r\n\r\nexport const contactsReducer = createReducer([], {\r\n  [addContact]: (state, { payload }) => [...state, payload],\r\n  [deleteContact]: (state, { payload }) =>\r\n    state.filter(contact => contact.id !== payload),\r\n});\r\n\r\nexport const filterReducer = createReducer('', {\r\n  [changeFilter]: (_, { payload }) => payload,\r\n});\r\n","import { combineReducers } from 'redux';\r\nimport { contactsReducer, filterReducer } from './contacts';\r\n\r\nexport const rootReducer = combineReducers({\r\n  contacts: contactsReducer,\r\n  filter: filterReducer,\r\n});\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport { rootReducer } from '../reducers';\r\n\r\nconst persistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nconst store = configureStore({\r\n  reducer: persistedReducer,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n  middleware: getDefaultMiddleware =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n      },\r\n    }).concat(logger),\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nconst storeObject = { store, persistor };\r\n\r\nexport default storeObject;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\nimport App from './App';\r\nimport storeObject from './redux/store';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <PersistGate loading={null} persistor={storeObject.persistor}>\r\n      <Provider store={storeObject.store}>\r\n        <App />\r\n      </Provider>\r\n    </PersistGate>\r\n  </React.StrictMode>,\r\n  document.querySelector('#root'),\r\n);\r\n"],"sourceRoot":""}